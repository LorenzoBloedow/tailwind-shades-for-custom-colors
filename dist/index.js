module.exports=function(hex){var result=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);var r=parseInt(result[1],16);var g=parseInt(result[2],16);var b=parseInt(result[3],16);r/=255,g/=255,b/=255;var max=Math.max(r,g,b),min=Math.min(r,g,b);var h,s,l=(max+min)/2;if(max==min){h=s=0}else{var d=max-min;s=l>.5?d/(2-max-min):d/(max+min);switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break}h/=6}s=s*100;s=Math.round(s);l=l*100;l=Math.round(l);h=Math.round(360*h);return{h:h,s:s,l:l}};const plugin=require("tailwindcss/plugin");const hexToHSL=require("./hexToHSL");function hasExtendColors(extendColors){for(const color in extendColors){if(!isBuiltInColor(color,extendColors[color])){return true}}return false}function isBuiltInColor(colorName,colorValue){if(typeof colorValue==="object"){return true}const builtInColors=["inherit","current","transparent","black","white"];for(let i=0;i<builtInColors.length;i++){if(colorName===builtInColors[i]){return true}}return false}const HEX=/#\w{3,6}$/;function autoGenerateShades({theme,addUtilities}){const extendColors=theme("colors");const newShades={};if(!hasExtendColors(extendColors)){console.error("[shadesforcustomcolors]: No shades were generated because 'theme.extend.colors' was not found.");return}for(const colorName in extendColors){const currentColor=extendColors[colorName];if(isBuiltInColor(colorName,extendColors[colorName])){continue}for(let i=1;i<=10;i++){if(!HEX.test(currentColor)){console.warn("[shadesforcustomcolors]: Skipping shade creation for "+colorName+".");console.warn("[shadesforcustomcolors]: Note that for this plugin to work you must write your custom colors in hex format.");break}const colorInHSL=hexToHSL(currentColor);newShades[`.text-${colorName}-${i*100}`]={color:`hsl(${colorInHSL.h}, ${colorInHSL.s}%, ${i*10}%)`};newShades[`.bg-${colorName}-${i*100}`]={backgroundColor:`hsl(${colorInHSL.h}, ${colorInHSL.s}%, ${i*10}%)`}}}addUtilities({...newShades})}module.exports=plugin(autoGenerateShades);